AI Helper (JonnyJr) – Architecture, Structures, and Build Overview

Objectives
- Personal AI helper to run research, synthesis, planning, and art inspiration workflows
- All changes auto-committed and PR’d via CI with human-in-the-loop review

High-Level Architecture
- Orchestration: GitHub Actions workflows trigger TS scripts
- Execution layer: TypeScript scripts in `scripts/` call APIs and write artifacts
- Analysis layer: Optional Python package for math/ML utilities
- Persistence: Repo files (`RESEARCH.md`, `SYNTHESIS.md`, `docs/nightly/`)
- Delivery: Branch + PR creation with labels/categories

Repository Structure (target)
```
.
├── scripts/
│  ├── research.ts              # Collects insights from Perplexity or simulates
│  ├── synthesize.ts            # Converts research into actionable plan
│  ├── open_pr.ts               # Fallback PR creation (if needed)
│  └── update_coverage_badge.mjs
├── packages/
│  ├── ts/
│  │  ├── src/index.ts          # Shared TS utilities (logging, io, prompts)
│  │  └── tests/
│  └── py/
│     └── src/example.py        # Placeholder math/ML helpers
├── docs/
│  ├── briefs/                  # Hand-authored briefs/prompts
│  ├── plans/                   # Generated plans
│  └── nightly/                 # Archived automated outputs
├── RESEARCH.md                 # Latest research
├── SYNTHESIS.md                # Latest synthesis/plan
└── .github/workflows/
   ├── ai-research.yml          # Daily/adhoc research
   ├── nightly-research.yml     # Nightly synthesis/archive
   └── art-inspiration.yml      # Art inspiration workflow
```

Core Components
- Research Engine (`scripts/research.ts`)
  - Inputs: freeform topic or structured prompt
  - Sources: Perplexity API (fallback to simulation if no key)
  - Output: structured `ResearchFindings` + `RESEARCH.md`

- Synthesis Engine (`scripts/synthesize.ts`)
  - Inputs: `RESEARCH.md` + optional style/category
  - LLM: OpenAI (configurable); returns concise execution plan
  - Output: `SYNTHESIS.md` + recommended next steps

- Art Inspiration Workflow (`.github/workflows/art-inspiration.yml`)
  - Inputs: style/medium, prompt, category
  - Actions: research → synthesis → branch commit → PR
  - Auth: uses `ACTIONS_PAT` for push/PR

Environment & Secrets
- `.env` (local): PPLX_API_KEY, OPENAI_API_KEY
- GitHub Secrets: `PPLX_API_KEY`, `OPENAI_API_KEY`, `ACTIONS_PAT`
- PAT scope: `repo` (full, or at least contents/pull-requests write)

TypeScript Utilities (to add under `packages/ts/src`)
```ts
// logging.ts
export const log = (...args: unknown[]) => console.log("[JJ]", ...args);
export const warn = (...args: unknown[]) => console.warn("[JJ]", ...args);
export const err = (...args: unknown[]) => console.error("[JJ]", ...args);

// fs-helpers.ts
import { writeFileSync } from 'fs';
export function writeText(path: string, text: string) { writeFileSync(path, text); }

// prompts.ts
export function artPrompt(style: string, prompt: string) {
  return `Art style: ${style}\nPrompt: ${prompt}`;
}
```

Synthesis Outline (LLM instruction shape)
```
Goal: Turn RESEARCH.md into an actionable, concise plan
Sections:
- Summary (3-5 bullets)
- Suggested Approach (numbered steps)
- Materials/Dependencies (if any)
- Risks & Mitigations
- Next Actions (checklist)
```

GitHub Actions Behavior
- art-inspiration.yml
  - checkout (no persisted creds)
  - configure PAT for HTTPS
  - run research → synthesize
  - create timestamped branch, commit artifacts, push with PAT
  - open PR with label = category

Error Handling & Observability
- TS18046-safe error handling via `getErrorMessage(error: unknown)`
- Clear logs with `[JJ]` prefix for CI readability
- Non-zero exits on hard failures; fallback to simulation where possible

Roadmap
- Add `packages/ts` utilities and unit tests
- Add configurable LLM models/providers
- Add template-driven brief generation for common tasks
- Add UI (optional) via simple static site to display latest outputs
- Add caching of API results to reduce cost

Immediate Next Actions
- Confirm secrets set: `PPLX_API_KEY`, `OPENAI_API_KEY`, `ACTIONS_PAT`
- Re-run Art Inspiration workflow to validate PAT push/PR
- Extract logging/fs/prompt utils into `packages/ts/src/`
- Add tests in `packages/ts/tests/`


